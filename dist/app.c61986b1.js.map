{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","content.ts","clock.ts","app.ts"],"names":[],"mappings":"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":"app.c61986b1.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","export const content = [\n  {\n    id: 100,\n    title: \"Welcome\",\n    body: `Is nostalgia always a good thing? Let's find out! This site is very roughly based on ceefax/teletext. Just type in the number of the page you want to visit and marvel at how things used to be. Sort of.`,\n  },\n  {\n    id: 200,\n    title: \"About\",\n    body: `I am a web developer of 4 years experience. I have worked front end, back end and everywhere in-between. Tackling logic problems in development is my favourite aspect of the job.`,\n  },\n  {\n    id: 300,\n    title: \"Contact\",\n    body: `If you can find him, maybe you can hire him. Actually it's just the normal places, like twitter and github (and linkedin) with the username leonsegal.`,\n  },\n  {\n    id: 501,\n    title: \"Bonus\",\n    body: `Easter eggs are great aren't they?`,\n  },\n];\n","export async function setClock() {\n  const clock = document.getElementById(\"clockHolder\");\n  const date = new Date();\n  const dateString = date.toDateString();\n  const timeString = date.toLocaleTimeString();\n  clock.innerText = `${dateString} ${timeString}`;\n\n  setInterval(() => {\n    const date = new Date();\n    const dateString = date.toDateString();\n    const timeString = date.toLocaleTimeString();\n    clock.innerText = `${dateString} ${timeString}`;\n  }, 1000);\n}\n","import \"regenerator-runtime/runtime\";\nimport { content } from \"./content\";\nimport { setClock } from \"./clock\";\n\nsetClock();\n\nlet numDisplay1 = \"\";\nlet numDisplay2 = \"\";\nlet numDisplay3 = \"\";\nlet currentDisplay = \"100\";\nlet targetDisplay = currentDisplay;\n\nconst counterHolder = document.getElementById(\"counterHolder\");\nconst targetHolder = document.getElementById(\"targetHolder\");\nconst contentHolder = document.getElementById(\"contentHolder\");\nconst navHolder = document.getElementById(\"navHolder\");\nlet isSearching = false;\n\nsetNav(content, navHolder);\n\ndisplayPageNumber(currentDisplay, counterHolder);\ndisplayPageNumber(targetDisplay, targetHolder);\ndisplayContent(currentDisplay);\n\ndocument.addEventListener(\"keypress\", async function (event) {\n  if (event.code.match(/^Digit[0-9]$/)) {\n    const keyPress = event.code.replace(\"Digit\", \"\");\n\n    if (numDisplay1 && numDisplay2 && numDisplay3) {\n      numDisplay1 = \"\";\n      numDisplay2 = \"\";\n      numDisplay3 = \"\";\n      isSearching = false;\n    }\n\n    if (numDisplay1 && numDisplay2 && !numDisplay3) {\n      isSearching = true;\n      numDisplay3 = keyPress;\n      targetDisplay = `${numDisplay1}${numDisplay2}${numDisplay3}`;\n\n      displayPageNumber(targetDisplay, targetHolder);\n\n      let current = Number(currentDisplay);\n      let target = Number(targetDisplay);\n      const timeIntervals = getRandomTimeIntervals({\n        smallCount: 100,\n        smallValue: 10,\n        largeCount: 5,\n        largeValue: 250,\n      });\n\n      while (current !== target && isSearching) {\n        await new Promise((resolve) =>\n          setTimeout(\n            resolve,\n            timeIntervals[Math.floor(Math.random() * timeIntervals.length)]\n          )\n        );\n\n        current += 1;\n\n        if (current === 512) {\n          current = 1;\n        }\n\n        displayPageNumber(current, counterHolder);\n      }\n\n      if (current === target) {\n        displayPageNumber(\n          `${numDisplay1}${numDisplay2}${numDisplay3}`,\n          counterHolder\n        );\n        currentDisplay = targetDisplay;\n        displayContent(currentDisplay);\n      }\n\n      isSearching = false;\n    }\n\n    if (numDisplay1 && !numDisplay2 && !numDisplay3) {\n      numDisplay2 = keyPress;\n      displayPageNumber(`-${numDisplay1}${numDisplay2}`, targetHolder);\n    }\n\n    if (!numDisplay1 && !numDisplay2 && !numDisplay3) {\n      numDisplay1 = keyPress;\n      displayPageNumber(`--${numDisplay1}`, targetHolder);\n    }\n  }\n});\n\nfunction displayPageNumber(data: string | number, elem: HTMLElement): void {\n  elem.innerText = `${data}`;\n}\n\nfunction displayContent(data) {\n  const page = content.find((page) => page[\"id\"] === Number(data));\n  if (page) {\n    const body = document.createElement(\"div\");\n    const bodyTitle = document.createElement(\"h2\");\n\n    bodyTitle.innerText = page[\"title\"];\n    bodyTitle.classList.add(\"white_text\");\n\n    const bodyText = document.createElement(\"p\");\n\n    bodyText.innerText = page[\"body\"];\n    body.appendChild(bodyTitle);\n    body.appendChild(bodyText);\n\n    contentHolder.innerHTML = body.innerHTML;\n  } else {\n    contentHolder.innerText = \"Page not found\";\n  }\n}\n\nfunction setNav(content, navHolder) {\n  const navContainer = document.createElement(\"div\");\n  navContainer.classList.add(\"flex\");\n  navContainer.classList.add(\"jc_sb\");\n  navContainer.classList.add(\"ml10\");\n  navContainer.classList.add(\"mr10\");\n\n  for (const page of content) {\n    if (Number(page[\"id\"]) !== 501) {\n      const pageContainer = document.createElement(\"span\");\n      const id = document.createElement(\"span\");\n\n      id.innerText = page[\"id\"];\n      id.classList.add(\"white_text\");\n\n      const title = document.createElement(\"span\");\n\n      title.innerText = page[\"title\"];\n      title.classList.add(\"mr10\");\n\n      pageContainer.appendChild(title);\n      pageContainer.appendChild(id);\n\n      navContainer.appendChild(pageContainer);\n    }\n  }\n\n  navHolder.appendChild(navContainer);\n}\n\nfunction getRandomTimeIntervals({\n  smallCount,\n  smallValue,\n  largeCount,\n  largeValue,\n}: {\n  smallCount: number;\n  smallValue: number;\n  largeCount: number;\n  largeValue: number;\n}) {\n  const output = [];\n\n  for (const elem of [...Array(smallCount).keys()]) {\n    output.push(smallValue);\n  }\n\n  for (const elem of [...Array(largeCount).keys()]) {\n    output.push(largeValue);\n  }\n\n  return output;\n}\n"]}